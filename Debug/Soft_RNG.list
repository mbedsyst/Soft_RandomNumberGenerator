
Soft_RNG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000750  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008e4  080008ec  000018ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008e4  080008e4  000018ec  2**0
                  CONTENTS
  4 .ARM          00000000  080008e4  080008e4  000018ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008e4  080008ec  000018ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008e4  080008e4  000018e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008e8  080008e8  000018e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080008ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080008ec  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001989  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000085f  00000000  00000000  000032a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  00003b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000191  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f09d  00000000  00000000  00003ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e98  00000000  00000000  00012f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053928  00000000  00000000  00015e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006973e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f0  00000000  00000000  00069784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00069e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080008cc 	.word	0x080008cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080008cc 	.word	0x080008cc

080001d4 <LED_Init>:
#include "LED.h"

void LED_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 80001d8:	4b14      	ldr	r3, [pc, #80]	@ (800022c <LED_Init+0x58>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a13      	ldr	r2, [pc, #76]	@ (800022c <LED_Init+0x58>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 80001e4:	4b12      	ldr	r3, [pc, #72]	@ (8000230 <LED_Init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	@ (8000230 <LED_Init+0x5c>)
 80001ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <LED_Init+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <LED_Init+0x5c>)
 80001f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <LED_Init+0x5c>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a0b      	ldr	r2, [pc, #44]	@ (8000230 <LED_Init+0x5c>)
 8000202:	f023 0320 	bic.w	r3, r3, #32
 8000206:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <LED_Init+0x5c>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a08      	ldr	r2, [pc, #32]	@ (8000230 <LED_Init+0x5c>)
 800020e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000212:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <LED_Init+0x5c>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a05      	ldr	r2, [pc, #20]	@ (8000230 <LED_Init+0x5c>)
 800021a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800021e:	60d3      	str	r3, [r2, #12]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000

08000234 <SPI2_Init>:
 *	SPI2_SCK  - PB13
 *	SPI2_NSS  - PB12
 */

void SPI2_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port B
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000238:	4b16      	ldr	r3, [pc, #88]	@ (8000294 <SPI2_Init+0x60>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023c:	4a15      	ldr	r2, [pc, #84]	@ (8000294 <SPI2_Init+0x60>)
 800023e:	f043 0302 	orr.w	r3, r3, #2
 8000242:	6313      	str	r3, [r2, #48]	@ 0x30
	// Enable clock SPI2 peripheral
	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000244:	4b13      	ldr	r3, [pc, #76]	@ (8000294 <SPI2_Init+0x60>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000248:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <SPI2_Init+0x60>)
 800024a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800024e:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure PB13, PB14, PB15 as Alternate Function for SPI2
	GPIOB->MODER &= ~(GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
 8000250:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <SPI2_Init+0x64>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a10      	ldr	r2, [pc, #64]	@ (8000298 <SPI2_Init+0x64>)
 8000256:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800025a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE15_1);
 800025c:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <SPI2_Init+0x64>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <SPI2_Init+0x64>)
 8000262:	f043 4329 	orr.w	r3, r3, #2835349504	@ 0xa9000000
 8000266:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= ((5 << 20) | (5 << 24) | (5 << 28));
 8000268:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <SPI2_Init+0x64>)
 800026a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800026c:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <SPI2_Init+0x64>)
 800026e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000272:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000276:	6253      	str	r3, [r2, #36]	@ 0x24

	// Pull CS High
	SPI2_DeselectSlave();
 8000278:	f000 f820 	bl	80002bc <SPI2_DeselectSlave>

	// Configure SPI2 in master mode, baud rate = fPCLK / 16, CPOL = 0, CPHA = 0, 8-bit data format
	SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <SPI2_Init+0x68>)
 800027e:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000282:	601a      	str	r2, [r3, #0]
	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <SPI2_Init+0x68>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <SPI2_Init+0x68>)
 800028a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40023800 	.word	0x40023800
 8000298:	40020400 	.word	0x40020400
 800029c:	40003800 	.word	0x40003800

080002a0 <SPI2_SelectSlave>:

void SPI2_SelectSlave(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	// Pull CS low
	GPIOB->BSRR = (1 << 28);
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <SPI2_SelectSlave+0x18>)
 80002a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80002aa:	619a      	str	r2, [r3, #24]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40020400 	.word	0x40020400

080002bc <SPI2_DeselectSlave>:

void SPI2_DeselectSlave(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
    	// Pull CS high
    	GPIOB->BSRR = (1 << 12);
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <SPI2_DeselectSlave+0x18>)
 80002c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002c6:	619a      	str	r2, [r3, #24]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40020400 	.word	0x40020400

080002d8 <SPI2_TransmitReceiveByte>:

uint8_t SPI2_TransmitReceiveByte(uint8_t data)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
    	// Wait until TXE (Transmit buffer empty)
    	while(!(SPI2->SR & SPI_SR_TXE));
 80002e2:	bf00      	nop
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <SPI2_TransmitReceiveByte+0x40>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f003 0302 	and.w	r3, r3, #2
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f9      	beq.n	80002e4 <SPI2_TransmitReceiveByte+0xc>
    	// Send data
    	SPI2->DR = data;
 80002f0:	4a09      	ldr	r2, [pc, #36]	@ (8000318 <SPI2_TransmitReceiveByte+0x40>)
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	60d3      	str	r3, [r2, #12]
    	// Wait until RXNE (Receive buffer not empty)
    	while(!(SPI2->SR & SPI_SR_RXNE));
 80002f6:	bf00      	nop
 80002f8:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <SPI2_TransmitReceiveByte+0x40>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0f9      	beq.n	80002f8 <SPI2_TransmitReceiveByte+0x20>
    	// Return received data
    	return (uint8_t)(SPI2->DR);
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <SPI2_TransmitReceiveByte+0x40>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	b2db      	uxtb	r3, r3
}
 800030a:	4618      	mov	r0, r3
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40003800 	.word	0x40003800

0800031c <SPI2_TransmitReceive_MultiByte>:

void SPI2_TransmitReceive_MultiByte(uint8_t *txData, uint8_t *rxData, uint16_t size)
{
 800031c:	b480      	push	{r7}
 800031e:	b087      	sub	sp, #28
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	4613      	mov	r3, r2
 8000328:	80fb      	strh	r3, [r7, #6]
    	uint16_t i = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	82fb      	strh	r3, [r7, #22]
    	while (i < size)
 800032e:	e021      	b.n	8000374 <SPI2_TransmitReceive_MultiByte+0x58>
    	{
        	// Wait until TXE (Transmit buffer empty)
        	while (!(SPI2->SR & SPI_SR_TXE));
 8000330:	bf00      	nop
 8000332:	4b16      	ldr	r3, [pc, #88]	@ (800038c <SPI2_TransmitReceive_MultiByte+0x70>)
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	f003 0302 	and.w	r3, r3, #2
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <SPI2_TransmitReceive_MultiByte+0x16>
        	// Transmit data
        	SPI2->DR = txData[i];
 800033e:	8afb      	ldrh	r3, [r7, #22]
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	4413      	add	r3, r2
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <SPI2_TransmitReceive_MultiByte+0x70>)
 8000348:	60da      	str	r2, [r3, #12]
        	// Wait until RXNE (Receive buffer not empty)
       		while (!(SPI2->SR & SPI_SR_RXNE));
 800034a:	bf00      	nop
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <SPI2_TransmitReceive_MultiByte+0x70>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	2b00      	cmp	r3, #0
 8000356:	d0f9      	beq.n	800034c <SPI2_TransmitReceive_MultiByte+0x30>
        	// Read received data, even if rxData is NULL (to clear RXNE flag)
        	uint8_t receivedByte = (uint8_t)(SPI2->DR);
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <SPI2_TransmitReceive_MultiByte+0x70>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	757b      	strb	r3, [r7, #21]
        	// Store received data only if rxData is not NULL
        	if (rxData != NULL)
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d004      	beq.n	800036e <SPI2_TransmitReceive_MultiByte+0x52>
        	{
            		rxData[i] = receivedByte;
 8000364:	8afb      	ldrh	r3, [r7, #22]
 8000366:	68ba      	ldr	r2, [r7, #8]
 8000368:	4413      	add	r3, r2
 800036a:	7d7a      	ldrb	r2, [r7, #21]
 800036c:	701a      	strb	r2, [r3, #0]
        	}
        	i++;
 800036e:	8afb      	ldrh	r3, [r7, #22]
 8000370:	3301      	adds	r3, #1
 8000372:	82fb      	strh	r3, [r7, #22]
    	while (i < size)
 8000374:	8afa      	ldrh	r2, [r7, #22]
 8000376:	88fb      	ldrh	r3, [r7, #6]
 8000378:	429a      	cmp	r2, r3
 800037a:	d3d9      	bcc.n	8000330 <SPI2_TransmitReceive_MultiByte+0x14>
    	}
}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	371c      	adds	r7, #28
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40003800 	.word	0x40003800

08000390 <delay_ms>:
#include "SYSTICK.h"

void delay_ms(uint32_t ms)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick->CTRL |= (1<<0) | (1<<2) ;
 8000398:	4b13      	ldr	r3, [pc, #76]	@ (80003e8 <delay_ms+0x58>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a12      	ldr	r2, [pc, #72]	@ (80003e8 <delay_ms+0x58>)
 800039e:	f043 0305 	orr.w	r3, r3, #5
 80003a2:	6013      	str	r3, [r2, #0]
	SysTick->LOAD  = 15999;
 80003a4:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <delay_ms+0x58>)
 80003a6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003aa:	605a      	str	r2, [r3, #4]
	for(i=0; i<ms; i++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	e009      	b.n	80003c6 <delay_ms+0x36>
	{
		while(!(SysTick->CTRL & (1<<16)));
 80003b2:	bf00      	nop
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <delay_ms+0x58>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f9      	beq.n	80003b4 <delay_ms+0x24>
	for(i=0; i<ms; i++)
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d3f1      	bcc.n	80003b2 <delay_ms+0x22>
	}
	SysTick->CTRL &=~(1U<<0) ;
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <delay_ms+0x58>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a05      	ldr	r2, [pc, #20]	@ (80003e8 <delay_ms+0x58>)
 80003d4:	f023 0301 	bic.w	r3, r3, #1
 80003d8:	6013      	str	r3, [r2, #0]
}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <TIM2_Init>:
#include "Soft_RNG.h"

#define SEED_CONST		0x5A5A5A5A

static void TIM2_Init(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <TIM2_Init+0x4c>)
 80003f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f4:	4a10      	ldr	r2, [pc, #64]	@ (8000438 <TIM2_Init+0x4c>)
 80003f6:	f043 0301 	orr.w	r3, r3, #1
 80003fa:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->CR1 &= ~TIM_CR1_DIR;
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000406:	f023 0310 	bic.w	r3, r3, #16
 800040a:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 1;
 800040c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000410:	2201      	movs	r2, #1
 8000412:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 0xFFFFFFFF;
 8000414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000418:	f04f 32ff 	mov.w	r2, #4294967295
 800041c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;
 800041e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6013      	str	r3, [r2, #0]
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40023800 	.word	0x40023800

0800043c <TIM3_Init>:

static void TIM3_Init(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <TIM3_Init+0x44>)
 8000442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000444:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <TIM3_Init+0x44>)
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM3->CR1 |= TIM_CR1_DIR;
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <TIM3_Init+0x48>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0c      	ldr	r2, [pc, #48]	@ (8000484 <TIM3_Init+0x48>)
 8000452:	f043 0310 	orr.w	r3, r3, #16
 8000456:	6013      	str	r3, [r2, #0]
	TIM3->PSC = 479;
 8000458:	4b0a      	ldr	r3, [pc, #40]	@ (8000484 <TIM3_Init+0x48>)
 800045a:	f240 12df 	movw	r2, #479	@ 0x1df
 800045e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 0xFFFFFFFF;
 8000460:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <TIM3_Init+0x48>)
 8000462:	f04f 32ff 	mov.w	r2, #4294967295
 8000466:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CR1 |= TIM_CR1_CEN;
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <TIM3_Init+0x48>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a05      	ldr	r2, [pc, #20]	@ (8000484 <TIM3_Init+0x48>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40023800 	.word	0x40023800
 8000484:	40000400 	.word	0x40000400

08000488 <GetHardwareSeed>:

static uint32_t GetHardwareSeed(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
	uint32_t count2 = TIM2->CNT;
 800048e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000494:	607b      	str	r3, [r7, #4]
	uint32_t count3 = TIM3->CNT;
 8000496:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <GetHardwareSeed+0x28>)
 8000498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800049a:	603b      	str	r3, [r7, #0]
	return (count2 ^ count3);
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	4053      	eors	r3, r2
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40000400 	.word	0x40000400

080004b4 <GetLFSR>:

static uint16_t GetLFSR(uint16_t seed16)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
	uint16_t lsb = (seed16 & 0x01);
 80004be:	88fb      	ldrh	r3, [r7, #6]
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	81fb      	strh	r3, [r7, #14]
	seed16 >>= 1;
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	80fb      	strh	r3, [r7, #6]
	if(lsb)
 80004cc:	89fb      	ldrh	r3, [r7, #14]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d007      	beq.n	80004e2 <GetLFSR+0x2e>
	{
		seed16 ^= 0xB400;
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	f083 437f 	eor.w	r3, r3, #4278190080	@ 0xff000000
 80004d8:	f483 037f 	eor.w	r3, r3, #16711680	@ 0xff0000
 80004dc:	f483 4334 	eor.w	r3, r3, #46080	@ 0xb400
 80004e0:	80fb      	strh	r3, [r7, #6]
	}
	return seed16;
 80004e2:	88fb      	ldrh	r3, [r7, #6]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <GetXORShift>:

static uint32_t GetXORShift(uint32_t seed32)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	uint32_t state = seed32;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
	state ^= (state << 13);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	035b      	lsls	r3, r3, #13
 8000500:	68fa      	ldr	r2, [r7, #12]
 8000502:	4053      	eors	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
	state ^= (state >> 17);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	0c5b      	lsrs	r3, r3, #17
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	4053      	eors	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
	state ^= (state << 5);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	015b      	lsls	r3, r3, #5
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	4053      	eors	r3, r2
 8000518:	60fb      	str	r3, [r7, #12]
	return state;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <GetFNVHash>:

static uint32_t GetFNVHash(uint32_t val)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	uint32_t hash = 2166136261U;
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <GetFNVHash+0x2c>)
 8000532:	60fb      	str	r3, [r7, #12]
	hash ^= val;
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4053      	eors	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
	hash *= 16777619;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4a06      	ldr	r2, [pc, #24]	@ (8000558 <GetFNVHash+0x30>)
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	60fb      	str	r3, [r7, #12]
	return hash;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	811c9dc5 	.word	0x811c9dc5
 8000558:	01000193 	.word	0x01000193

0800055c <SoftRNG_Init>:

void SoftRNG_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	TIM2_Init();
 8000560:	f7ff ff44 	bl	80003ec <TIM2_Init>
	TIM3_Init();
 8000564:	f7ff ff6a 	bl	800043c <TIM3_Init>
	UART2_Init();
 8000568:	f000 f84c 	bl	8000604 <UART2_Init>
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <SoftRNG_Generate>:

uint32_t SoftRNG_Generate(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
	uint32_t hardwareSeed = GetHardwareSeed();
 8000576:	f7ff ff87 	bl	8000488 <GetHardwareSeed>
 800057a:	6178      	str	r0, [r7, #20]
	uint32_t seedValue = hardwareSeed ^ SEED_CONST;
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	f083 335a 	eor.w	r3, r3, #1515870810	@ 0x5a5a5a5a
 8000582:	613b      	str	r3, [r7, #16]
	uint16_t seed16 = seedValue & 0xFFFF;
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	81fb      	strh	r3, [r7, #14]
	uint16_t lfsrVal = GetLFSR(seed16);
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff92 	bl	80004b4 <GetLFSR>
 8000590:	4603      	mov	r3, r0
 8000592:	81bb      	strh	r3, [r7, #12]
	uint32_t xorVal = GetXORShift(seedValue);
 8000594:	6938      	ldr	r0, [r7, #16]
 8000596:	f7ff ffab 	bl	80004f0 <GetXORShift>
 800059a:	60b8      	str	r0, [r7, #8]
	uint32_t combined = (lfsrVal & xorVal);
 800059c:	89bb      	ldrh	r3, [r7, #12]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	4013      	ands	r3, r2
 80005a2:	607b      	str	r3, [r7, #4]
	uint32_t randomVal = GetFNVHash(combined);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ffbf 	bl	8000528 <GetFNVHash>
 80005aa:	6038      	str	r0, [r7, #0]
	return randomVal;
 80005ac:	683b      	ldr	r3, [r7, #0]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	085a      	lsrs	r2, r3, #1
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	441a      	add	r2, r3
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	b29b      	uxth	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 80005e6:	6839      	ldr	r1, [r7, #0]
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ffe4 	bl	80005b6 <Compute_UART_Baud>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <UART2_SetBaudRate+0x24>)
 80005f4:	609a      	str	r2, [r3, #8]
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40004400 	.word	0x40004400

08000604 <UART2_Init>:

void UART2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <UART2_Init+0x68>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060c:	4a17      	ldr	r2, [pc, #92]	@ (800066c <UART2_Init+0x68>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000614:	4b15      	ldr	r3, [pc, #84]	@ (800066c <UART2_Init+0x68>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a14      	ldr	r2, [pc, #80]	@ (800066c <UART2_Init+0x68>)
 800061a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <UART2_Init+0x6c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a12      	ldr	r2, [pc, #72]	@ (8000670 <UART2_Init+0x6c>)
 8000626:	f023 0310 	bic.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 800062c:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <UART2_Init+0x6c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0f      	ldr	r2, [pc, #60]	@ (8000670 <UART2_Init+0x6c>)
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 8000638:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <UART2_Init+0x6c>)
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <UART2_Init+0x6c>)
 800063e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000642:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 8000644:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000648:	480a      	ldr	r0, [pc, #40]	@ (8000674 <UART2_Init+0x70>)
 800064a:	f7ff ffc7 	bl	80005dc <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <UART2_Init+0x74>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <UART2_Init+0x74>)
 8000654:	f043 030c 	orr.w	r3, r3, #12
 8000658:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 800065a:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <UART2_Init+0x74>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	4a06      	ldr	r2, [pc, #24]	@ (8000678 <UART2_Init+0x74>)
 8000660:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000664:	60d3      	str	r3, [r2, #12]
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	00f42400 	.word	0x00f42400
 8000678:	40004400 	.word	0x40004400

0800067c <W25Q_WriteEnable>:
#include "W25Qxx.h"

static void W25Q_WriteEnable(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 8000680:	f7ff fe0e 	bl	80002a0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_WRITE);
 8000684:	2006      	movs	r0, #6
 8000686:	f7ff fe27 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 800068a:	f7ff fe17 	bl	80002bc <SPI2_DeselectSlave>
	delay_ms(10);
 800068e:	200a      	movs	r0, #10
 8000690:	f7ff fe7e 	bl	8000390 <delay_ms>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <W25Q_WriteDisable>:

static void W25Q_WriteDisable(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 800069c:	f7ff fe00 	bl	80002a0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(DISABLE_WRITE);
 80006a0:	2004      	movs	r0, #4
 80006a2:	f7ff fe19 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 80006a6:	f7ff fe09 	bl	80002bc <SPI2_DeselectSlave>
	delay_ms(10);
 80006aa:	200a      	movs	r0, #10
 80006ac:	f7ff fe70 	bl	8000390 <delay_ms>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <W25Q_Reset>:

static void W25Q_Reset(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 80006b8:	f7ff fdf2 	bl	80002a0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_RESET);
 80006bc:	2066      	movs	r0, #102	@ 0x66
 80006be:	f7ff fe0b 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(EXECUTE_RESET);
 80006c2:	2099      	movs	r0, #153	@ 0x99
 80006c4:	f7ff fe08 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 80006c8:	f7ff fdf8 	bl	80002bc <SPI2_DeselectSlave>
	delay_ms(100);
 80006cc:	2064      	movs	r0, #100	@ 0x64
 80006ce:	f7ff fe5f 	bl	8000390 <delay_ms>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <W25Q_Init>:

void W25Q_Init(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
	SPI2_Init();
 80006da:	f7ff fdab 	bl	8000234 <SPI2_Init>
	W25Q_Reset();
 80006de:	f7ff ffe9 	bl	80006b4 <W25Q_Reset>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <W25Q_WritePage>:
	}
	SPI2_DeselectSlave();
}

static void W25Q_WritePage(uint32_t startPage, uint16_t offset, uint32_t size, uint8_t *data)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	460b      	mov	r3, r1
 80006f4:	817b      	strh	r3, [r7, #10]
	uint32_t memAddress = (startPage * 256) + offset;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	021a      	lsls	r2, r3, #8
 80006fa:	897b      	ldrh	r3, [r7, #10]
 80006fc:	4413      	add	r3, r2
 80006fe:	617b      	str	r3, [r7, #20]
	W25Q_WriteEnable();
 8000700:	f7ff ffbc 	bl	800067c <W25Q_WriteEnable>
	SPI2_SelectSlave();
 8000704:	f7ff fdcc 	bl	80002a0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(PAGE_WRITE);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fde5 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 16) & 0xFF);
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	0c1b      	lsrs	r3, r3, #16
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fddf 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 8) & 0xFF);
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdd9 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress) & 0xFF);
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fdd4 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceive_MultiByte(data, NULL, size);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	b29b      	uxth	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f7ff fdef 	bl	800031c <SPI2_TransmitReceive_MultiByte>
	SPI2_DeselectSlave();
 800073e:	f7ff fdbd 	bl	80002bc <SPI2_DeselectSlave>
	W25Q_WriteDisable();
 8000742:	f7ff ffa9 	bl	8000698 <W25Q_WriteDisable>
	delay_ms(5);
 8000746:	2005      	movs	r0, #5
 8000748:	f7ff fe22 	bl	8000390 <delay_ms>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <W25Q_WriteData>:

void W25Q_WriteData(uint32_t startPage, uint16_t offset, uint32_t size, uint8_t *data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	460b      	mov	r3, r1
 8000762:	817b      	strh	r3, [r7, #10]
    uint32_t bytesToWrite;
    uint32_t remainingBytes = size;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	623b      	str	r3, [r7, #32]
    uint32_t currentPage = startPage;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	61fb      	str	r3, [r7, #28]
    uint16_t currentOffset = offset;
 800076c:	897b      	ldrh	r3, [r7, #10]
 800076e:	837b      	strh	r3, [r7, #26]
    uint8_t *currentData = data;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	617b      	str	r3, [r7, #20]

    // While there's data left to write
    while (remainingBytes > 0)
 8000774:	e01c      	b.n	80007b0 <W25Q_WriteData+0x5c>
    {
        // Calculate how many bytes can be written to the current page
        bytesToWrite = 256 - currentOffset;
 8000776:	8b7b      	ldrh	r3, [r7, #26]
 8000778:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
        if (remainingBytes < bytesToWrite)
 800077e:	6a3a      	ldr	r2, [r7, #32]
 8000780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000782:	429a      	cmp	r2, r3
 8000784:	d201      	bcs.n	800078a <W25Q_WriteData+0x36>
        {
            bytesToWrite = remainingBytes;
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        // Call W25Q_WritePage() function
        W25Q_WritePage(currentPage, currentOffset, bytesToWrite, currentData);
 800078a:	8b79      	ldrh	r1, [r7, #26]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000790:	69f8      	ldr	r0, [r7, #28]
 8000792:	f7ff ffa8 	bl	80006e6 <W25Q_WritePage>

        // Update the remaining data, current data pointer, and Page Number
        remainingBytes -= bytesToWrite;
 8000796:	6a3a      	ldr	r2, [r7, #32]
 8000798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	623b      	str	r3, [r7, #32]
        currentData += bytesToWrite;
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a2:	4413      	add	r3, r2
 80007a4:	617b      	str	r3, [r7, #20]
        currentPage++;
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3301      	adds	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
        currentOffset = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	837b      	strh	r3, [r7, #26]
    while (remainingBytes > 0)
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1df      	bne.n	8000776 <W25Q_WriteData+0x22>
    }
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <main>:
#include "Soft_RNG.h"

uint32_t count = 0;

int main()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
    uint32_t random;
    LED_Init();
 80007c6:	f7ff fd05 	bl	80001d4 <LED_Init>
    W25Q_Init();
 80007ca:	f7ff ff84 	bl	80006d6 <W25Q_Init>
    SoftRNG_Init();
 80007ce:	f7ff fec5 	bl	800055c <SoftRNG_Init>

    for(int i = 0; i < 10000; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e020      	b.n	800081a <main+0x5a>
    {
        random = SoftRNG_Generate();
 80007d8:	f7ff feca 	bl	8000570 <SoftRNG_Generate>
 80007dc:	4603      	mov	r3, r0
 80007de:	603b      	str	r3, [r7, #0]
        W25Q_WriteData(i, 0, 4, (uint8_t *)&random);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	463b      	mov	r3, r7
 80007e4:	2204      	movs	r2, #4
 80007e6:	2100      	movs	r1, #0
 80007e8:	f7ff ffb4 	bl	8000754 <W25Q_WriteData>
        count++;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <main+0x68>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <main+0x68>)
 80007f4:	6013      	str	r3, [r2, #0]
        delay_ms(i%100);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <main+0x6c>)
 80007fa:	fb82 1203 	smull	r1, r2, r2, r3
 80007fe:	1151      	asrs	r1, r2, #5
 8000800:	17da      	asrs	r2, r3, #31
 8000802:	1a8a      	subs	r2, r1, r2
 8000804:	2164      	movs	r1, #100	@ 0x64
 8000806:	fb01 f202 	mul.w	r2, r1, r2
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	4613      	mov	r3, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fdbe 	bl	8000390 <delay_ms>
    for(int i = 0; i < 10000; i++)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3301      	adds	r3, #1
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000820:	4293      	cmp	r3, r2
 8000822:	ddd9      	ble.n	80007d8 <main+0x18>
    }

    while(1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <main+0x64>
 8000828:	2000001c 	.word	0x2000001c
 800082c:	51eb851f 	.word	0x51eb851f

08000830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000830:	480d      	ldr	r0, [pc, #52]	@ (8000868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000832:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000834:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <LoopForever+0x6>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <LoopForever+0xe>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	@ (800087c <LoopForever+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800085e:	f000 f811 	bl	8000884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000862:	f7ff ffad 	bl	80007c0 <main>

08000866 <LoopForever>:

LoopForever:
  b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
  ldr   r0, =_estack
 8000868:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000874:	080008ec 	.word	0x080008ec
  ldr r2, =_sbss
 8000878:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800087c:	20000020 	.word	0x20000020

08000880 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC_IRQHandler>
	...

08000884 <__libc_init_array>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	4d0d      	ldr	r5, [pc, #52]	@ (80008bc <__libc_init_array+0x38>)
 8000888:	4c0d      	ldr	r4, [pc, #52]	@ (80008c0 <__libc_init_array+0x3c>)
 800088a:	1b64      	subs	r4, r4, r5
 800088c:	10a4      	asrs	r4, r4, #2
 800088e:	2600      	movs	r6, #0
 8000890:	42a6      	cmp	r6, r4
 8000892:	d109      	bne.n	80008a8 <__libc_init_array+0x24>
 8000894:	4d0b      	ldr	r5, [pc, #44]	@ (80008c4 <__libc_init_array+0x40>)
 8000896:	4c0c      	ldr	r4, [pc, #48]	@ (80008c8 <__libc_init_array+0x44>)
 8000898:	f000 f818 	bl	80008cc <_init>
 800089c:	1b64      	subs	r4, r4, r5
 800089e:	10a4      	asrs	r4, r4, #2
 80008a0:	2600      	movs	r6, #0
 80008a2:	42a6      	cmp	r6, r4
 80008a4:	d105      	bne.n	80008b2 <__libc_init_array+0x2e>
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ac:	4798      	blx	r3
 80008ae:	3601      	adds	r6, #1
 80008b0:	e7ee      	b.n	8000890 <__libc_init_array+0xc>
 80008b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008b6:	4798      	blx	r3
 80008b8:	3601      	adds	r6, #1
 80008ba:	e7f2      	b.n	80008a2 <__libc_init_array+0x1e>
 80008bc:	080008e4 	.word	0x080008e4
 80008c0:	080008e4 	.word	0x080008e4
 80008c4:	080008e4 	.word	0x080008e4
 80008c8:	080008e8 	.word	0x080008e8

080008cc <_init>:
 80008cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ce:	bf00      	nop
 80008d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008d2:	bc08      	pop	{r3}
 80008d4:	469e      	mov	lr, r3
 80008d6:	4770      	bx	lr

080008d8 <_fini>:
 80008d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008da:	bf00      	nop
 80008dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008de:	bc08      	pop	{r3}
 80008e0:	469e      	mov	lr, r3
 80008e2:	4770      	bx	lr
