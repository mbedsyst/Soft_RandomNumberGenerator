
Soft_RNG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000538  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006cc  080006d4  000016d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006cc  080006cc  000016d4  2**0
                  CONTENTS
  4 .ARM          00000000  080006cc  080006cc  000016d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006cc  080006d4  000016d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006cc  080006cc  000016cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006d0  080006d0  000016d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080006d4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080006d4  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018f7  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000850  00000000  00000000  00002ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00003850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000018b  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f139  00000000  00000000  00003c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e3c  00000000  00000000  00012d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053910  00000000  00000000  00015b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000694a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006c8  00000000  00000000  000694e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00069bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006b4 	.word	0x080006b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006b4 	.word	0x080006b4

080001d4 <LED_Init>:
#include "LED.h"

void LED_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 80001d8:	4b14      	ldr	r3, [pc, #80]	@ (800022c <LED_Init+0x58>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a13      	ldr	r2, [pc, #76]	@ (800022c <LED_Init+0x58>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 80001e4:	4b12      	ldr	r3, [pc, #72]	@ (8000230 <LED_Init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	@ (8000230 <LED_Init+0x5c>)
 80001ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <LED_Init+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <LED_Init+0x5c>)
 80001f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <LED_Init+0x5c>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a0b      	ldr	r2, [pc, #44]	@ (8000230 <LED_Init+0x5c>)
 8000202:	f023 0320 	bic.w	r3, r3, #32
 8000206:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <LED_Init+0x5c>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a08      	ldr	r2, [pc, #32]	@ (8000230 <LED_Init+0x5c>)
 800020e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000212:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <LED_Init+0x5c>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a05      	ldr	r2, [pc, #20]	@ (8000230 <LED_Init+0x5c>)
 800021a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800021e:	60d3      	str	r3, [r2, #12]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000

08000234 <SPI2_Init>:
 *	SPI2_SCK  - PB13
 *	SPI2_NSS  - PB12
 */

void SPI2_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port B
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000238:	4b16      	ldr	r3, [pc, #88]	@ (8000294 <SPI2_Init+0x60>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023c:	4a15      	ldr	r2, [pc, #84]	@ (8000294 <SPI2_Init+0x60>)
 800023e:	f043 0302 	orr.w	r3, r3, #2
 8000242:	6313      	str	r3, [r2, #48]	@ 0x30
	// Enable clock SPI2 peripheral
	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000244:	4b13      	ldr	r3, [pc, #76]	@ (8000294 <SPI2_Init+0x60>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000248:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <SPI2_Init+0x60>)
 800024a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800024e:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure PB13, PB14, PB15 as Alternate Function for SPI2
	GPIOB->MODER &= ~(GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
 8000250:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <SPI2_Init+0x64>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a10      	ldr	r2, [pc, #64]	@ (8000298 <SPI2_Init+0x64>)
 8000256:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800025a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE15_1);
 800025c:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <SPI2_Init+0x64>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <SPI2_Init+0x64>)
 8000262:	f043 4329 	orr.w	r3, r3, #2835349504	@ 0xa9000000
 8000266:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= ((5 << 20) | (5 << 24) | (5 << 28));
 8000268:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <SPI2_Init+0x64>)
 800026a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800026c:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <SPI2_Init+0x64>)
 800026e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000272:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000276:	6253      	str	r3, [r2, #36]	@ 0x24

	// Pull CS High
	SPI2_DeselectSlave();
 8000278:	f000 f820 	bl	80002bc <SPI2_DeselectSlave>

	// Configure SPI2 in master mode, baud rate = fPCLK / 16, CPOL = 0, CPHA = 0, 8-bit data format
	SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <SPI2_Init+0x68>)
 800027e:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000282:	601a      	str	r2, [r3, #0]
	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <SPI2_Init+0x68>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <SPI2_Init+0x68>)
 800028a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40023800 	.word	0x40023800
 8000298:	40020400 	.word	0x40020400
 800029c:	40003800 	.word	0x40003800

080002a0 <SPI2_SelectSlave>:

void SPI2_SelectSlave(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	// Pull CS low
	GPIOB->BSRR = (1 << 28);
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <SPI2_SelectSlave+0x18>)
 80002a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80002aa:	619a      	str	r2, [r3, #24]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40020400 	.word	0x40020400

080002bc <SPI2_DeselectSlave>:

void SPI2_DeselectSlave(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
    	// Pull CS high
    	GPIOB->BSRR = (1 << 12);
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <SPI2_DeselectSlave+0x18>)
 80002c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002c6:	619a      	str	r2, [r3, #24]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40020400 	.word	0x40020400

080002d8 <SPI2_TransmitReceiveByte>:

uint8_t SPI2_TransmitReceiveByte(uint8_t data)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
    	// Wait until TXE (Transmit buffer empty)
    	while(!(SPI2->SR & SPI_SR_TXE));
 80002e2:	bf00      	nop
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <SPI2_TransmitReceiveByte+0x40>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f003 0302 	and.w	r3, r3, #2
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f9      	beq.n	80002e4 <SPI2_TransmitReceiveByte+0xc>
    	// Send data
    	SPI2->DR = data;
 80002f0:	4a09      	ldr	r2, [pc, #36]	@ (8000318 <SPI2_TransmitReceiveByte+0x40>)
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	60d3      	str	r3, [r2, #12]
    	// Wait until RXNE (Receive buffer not empty)
    	while(!(SPI2->SR & SPI_SR_RXNE));
 80002f6:	bf00      	nop
 80002f8:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <SPI2_TransmitReceiveByte+0x40>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0f9      	beq.n	80002f8 <SPI2_TransmitReceiveByte+0x20>
    	// Return received data
    	return (uint8_t)(SPI2->DR);
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <SPI2_TransmitReceiveByte+0x40>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	b2db      	uxtb	r3, r3
}
 800030a:	4618      	mov	r0, r3
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40003800 	.word	0x40003800

0800031c <delay_ms>:
#include "SYSTICK.h"

void delay_ms(uint32_t ms)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick->CTRL |= (1<<0) | (1<<2) ;
 8000324:	4b13      	ldr	r3, [pc, #76]	@ (8000374 <delay_ms+0x58>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a12      	ldr	r2, [pc, #72]	@ (8000374 <delay_ms+0x58>)
 800032a:	f043 0305 	orr.w	r3, r3, #5
 800032e:	6013      	str	r3, [r2, #0]
	SysTick->LOAD  = 15999;
 8000330:	4b10      	ldr	r3, [pc, #64]	@ (8000374 <delay_ms+0x58>)
 8000332:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000336:	605a      	str	r2, [r3, #4]
	for(i=0; i<ms; i++)
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	e009      	b.n	8000352 <delay_ms+0x36>
	{
		while(!(SysTick->CTRL & (1<<16)));
 800033e:	bf00      	nop
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <delay_ms+0x58>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <delay_ms+0x24>
	for(i=0; i<ms; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	429a      	cmp	r2, r3
 8000358:	d3f1      	bcc.n	800033e <delay_ms+0x22>
	}
	SysTick->CTRL &=~(1U<<0) ;
 800035a:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <delay_ms+0x58>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a05      	ldr	r2, [pc, #20]	@ (8000374 <delay_ms+0x58>)
 8000360:	f023 0301 	bic.w	r3, r3, #1
 8000364:	6013      	str	r3, [r2, #0]
}
 8000366:	bf00      	nop
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000e010 	.word	0xe000e010

08000378 <TIM2_Init>:
#include "Soft_RNG.h"

#define SEED_CONST		0x5A5A5A5A

static void TIM2_Init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800037c:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <TIM2_Init+0x4c>)
 800037e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000380:	4a10      	ldr	r2, [pc, #64]	@ (80003c4 <TIM2_Init+0x4c>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->CR1 &= ~TIM_CR1_DIR;
 8000388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000392:	f023 0310 	bic.w	r3, r3, #16
 8000396:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 15;
 8000398:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039c:	220f      	movs	r2, #15
 800039e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 0xFFFFFFFF;
 80003a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a4:	f04f 32ff 	mov.w	r2, #4294967295
 80003a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6013      	str	r3, [r2, #0]
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	40023800 	.word	0x40023800

080003c8 <GetHardwareSeed>:

static uint32_t GetHardwareSeed(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 80003cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <GetLFSR>:

static uint16_t GetLFSR(uint16_t seed16)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	80fb      	strh	r3, [r7, #6]
	uint16_t lsb = (seed16 & 0x01);
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	81fb      	strh	r3, [r7, #14]
	seed16 >>= 1;
 80003ee:	88fb      	ldrh	r3, [r7, #6]
 80003f0:	085b      	lsrs	r3, r3, #1
 80003f2:	80fb      	strh	r3, [r7, #6]
	if(lsb)
 80003f4:	89fb      	ldrh	r3, [r7, #14]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d007      	beq.n	800040a <GetLFSR+0x2e>
	{
		seed16 ^= 0xB400;
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	f083 437f 	eor.w	r3, r3, #4278190080	@ 0xff000000
 8000400:	f483 037f 	eor.w	r3, r3, #16711680	@ 0xff0000
 8000404:	f483 4334 	eor.w	r3, r3, #46080	@ 0xb400
 8000408:	80fb      	strh	r3, [r7, #6]
	}
	return seed16;
 800040a:	88fb      	ldrh	r3, [r7, #6]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <GetXORShift>:

static uint32_t GetXORShift(uint32_t seed32)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	uint32_t state = seed32;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	60fb      	str	r3, [r7, #12]
	state ^= (state << 13);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	035b      	lsls	r3, r3, #13
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	4053      	eors	r3, r2
 800042c:	60fb      	str	r3, [r7, #12]
	state ^= (state >> 17);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	0c5b      	lsrs	r3, r3, #17
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	4053      	eors	r3, r2
 8000436:	60fb      	str	r3, [r7, #12]
	state ^= (state << 5);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	015b      	lsls	r3, r3, #5
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	4053      	eors	r3, r2
 8000440:	60fb      	str	r3, [r7, #12]
	return state;
 8000442:	68fb      	ldr	r3, [r7, #12]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <GetFNVHash>:

static uint32_t GetFNVHash(uint32_t val)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t hash = 2166136261U;
 8000458:	4b08      	ldr	r3, [pc, #32]	@ (800047c <GetFNVHash+0x2c>)
 800045a:	60fb      	str	r3, [r7, #12]
	hash ^= val;
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4053      	eors	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]
	hash *= 16777619;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	4a06      	ldr	r2, [pc, #24]	@ (8000480 <GetFNVHash+0x30>)
 8000468:	fb02 f303 	mul.w	r3, r2, r3
 800046c:	60fb      	str	r3, [r7, #12]
	return hash;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	811c9dc5 	.word	0x811c9dc5
 8000480:	01000193 	.word	0x01000193

08000484 <SoftRNG_Init>:

void SoftRNG_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	TIM2_Init();
 8000488:	f7ff ff76 	bl	8000378 <TIM2_Init>
	UART2_Init();
 800048c:	f000 f84c 	bl	8000528 <UART2_Init>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <SoftRNG_Generate>:

uint32_t SoftRNG_Generate(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
	uint32_t hardwareSeed = GetHardwareSeed();
 800049a:	f7ff ff95 	bl	80003c8 <GetHardwareSeed>
 800049e:	6178      	str	r0, [r7, #20]
	uint32_t seedValue = hardwareSeed ^ SEED_CONST;
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	f083 335a 	eor.w	r3, r3, #1515870810	@ 0x5a5a5a5a
 80004a6:	613b      	str	r3, [r7, #16]
	uint16_t seed16 = seedValue & 0xFFFF;
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	81fb      	strh	r3, [r7, #14]
	uint16_t lfsrVal = GetLFSR(seed16);
 80004ac:	89fb      	ldrh	r3, [r7, #14]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff94 	bl	80003dc <GetLFSR>
 80004b4:	4603      	mov	r3, r0
 80004b6:	81bb      	strh	r3, [r7, #12]
	uint32_t xorVal = GetXORShift(seedValue);
 80004b8:	6938      	ldr	r0, [r7, #16]
 80004ba:	f7ff ffad 	bl	8000418 <GetXORShift>
 80004be:	60b8      	str	r0, [r7, #8]
	uint32_t combined = lfsrVal & xorVal;
 80004c0:	89bb      	ldrh	r3, [r7, #12]
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4013      	ands	r3, r2
 80004c6:	607b      	str	r3, [r7, #4]
	uint32_t randomVal = GetFNVHash(combined);
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f7ff ffc1 	bl	8000450 <GetFNVHash>
 80004ce:	6038      	str	r0, [r7, #0]
	return randomVal;
 80004d0:	683b      	ldr	r3, [r7, #0]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	085a      	lsrs	r2, r3, #1
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	441a      	add	r2, r3
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f2:	b29b      	uxth	r3, r3
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 800050a:	6839      	ldr	r1, [r7, #0]
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff ffe4 	bl	80004da <Compute_UART_Baud>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <UART2_SetBaudRate+0x24>)
 8000518:	609a      	str	r2, [r3, #8]
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40004400 	.word	0x40004400

08000528 <UART2_Init>:

void UART2_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <UART2_Init+0x68>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <UART2_Init+0x68>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000538:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <UART2_Init+0x68>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a14      	ldr	r2, [pc, #80]	@ (8000590 <UART2_Init+0x68>)
 800053e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 8000544:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <UART2_Init+0x6c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a12      	ldr	r2, [pc, #72]	@ (8000594 <UART2_Init+0x6c>)
 800054a:	f023 0310 	bic.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000550:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <UART2_Init+0x6c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <UART2_Init+0x6c>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <UART2_Init+0x6c>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a0c      	ldr	r2, [pc, #48]	@ (8000594 <UART2_Init+0x6c>)
 8000562:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000566:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 8000568:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800056c:	480a      	ldr	r0, [pc, #40]	@ (8000598 <UART2_Init+0x70>)
 800056e:	f7ff ffc7 	bl	8000500 <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000572:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <UART2_Init+0x74>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	4a09      	ldr	r2, [pc, #36]	@ (800059c <UART2_Init+0x74>)
 8000578:	f043 030c 	orr.w	r3, r3, #12
 800057c:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 800057e:	4b07      	ldr	r3, [pc, #28]	@ (800059c <UART2_Init+0x74>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	4a06      	ldr	r2, [pc, #24]	@ (800059c <UART2_Init+0x74>)
 8000584:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000588:	60d3      	str	r3, [r2, #12]
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800
 8000594:	40020000 	.word	0x40020000
 8000598:	00f42400 	.word	0x00f42400
 800059c:	40004400 	.word	0x40004400

080005a0 <W25Q_Reset>:
	SPI2_DeselectSlave();
	delay_ms(10);
}

static void W25Q_Reset(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 80005a4:	f7ff fe7c 	bl	80002a0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_RESET);
 80005a8:	2066      	movs	r0, #102	@ 0x66
 80005aa:	f7ff fe95 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(EXECUTE_RESET);
 80005ae:	2099      	movs	r0, #153	@ 0x99
 80005b0:	f7ff fe92 	bl	80002d8 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 80005b4:	f7ff fe82 	bl	80002bc <SPI2_DeselectSlave>
	delay_ms(100);
 80005b8:	2064      	movs	r0, #100	@ 0x64
 80005ba:	f7ff feaf 	bl	800031c <delay_ms>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <W25Q_Init>:

void W25Q_Init(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
	SPI2_Init();
 80005c6:	f7ff fe35 	bl	8000234 <SPI2_Init>
	W25Q_Reset();
 80005ca:	f7ff ffe9 	bl	80005a0 <W25Q_Reset>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <main>:
#include "Soft_RNG.h"

uint32_t count = 0;

int main()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	uint32_t random;

	LED_Init();
 80005da:	f7ff fdfb 	bl	80001d4 <LED_Init>
	W25Q_Init();
 80005de:	f7ff fff0 	bl	80005c2 <W25Q_Init>
	SoftRNG_Init();
 80005e2:	f7ff ff4f 	bl	8000484 <SoftRNG_Init>

	for(int i = 0; i < 100000; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	e00a      	b.n	8000602 <main+0x2e>
	{
		random = SoftRNG_Generate();
 80005ec:	f7ff ff52 	bl	8000494 <SoftRNG_Generate>
 80005f0:	6038      	str	r0, [r7, #0]
		count++;
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <main+0x3c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <main+0x3c>)
 80005fa:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 100000; i++)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <main+0x40>)
 8000606:	4293      	cmp	r3, r2
 8000608:	ddf0      	ble.n	80005ec <main+0x18>
	}

	while(1)
 800060a:	bf00      	nop
 800060c:	e7fd      	b.n	800060a <main+0x36>
 800060e:	bf00      	nop
 8000610:	2000001c 	.word	0x2000001c
 8000614:	0001869f 	.word	0x0001869f

08000618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800061c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	@ (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	@ (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f000 f811 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff ffc3 	bl	80005d4 <main>

0800064e <LoopForever>:

LoopForever:
  b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800065c:	080006d4 	.word	0x080006d4
  ldr r2, =_sbss
 8000660:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000664:	20000020 	.word	0x20000020

08000668 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC_IRQHandler>
	...

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	@ (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	@ (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	@ (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	@ (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 f818 	bl	80006b4 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	080006cc 	.word	0x080006cc
 80006a8:	080006cc 	.word	0x080006cc
 80006ac:	080006cc 	.word	0x080006cc
 80006b0:	080006d0 	.word	0x080006d0

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
